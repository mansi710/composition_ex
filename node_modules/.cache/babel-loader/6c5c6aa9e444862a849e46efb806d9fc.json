{"ast":null,"code":"import { ref, watch, reactive, toRefs } from \"vue\";\nimport _ from \"lodash\";\nexport default {\n  name: \"ReplacingWatchers\",\n\n  setup() {\n    const firstName = ref(\"\");\n    const lastName = ref(\"twin\"); //the function accepts 2 argument\n    // 1 st arguments data stores to watch\n    // 2 nd argument function which  is pretty much as same we use our data option\n    //it receives oldvalue and new value as argument\n    // watch(firstName, (newValue, oldValue) => {\n    //   console.log(\"old value\", oldValue);\n    //   console.log(\"new value\", newValue);\n    // });\n    //watch function also expects an array of data sources as well\n    //also uses multiple sources using array\n\n    watch([firstName, lastName], (newValues, oldValues) => {\n      console.log(\"first name old value\", oldValues[0]);\n      console.log(\"first name new value\", newValues[0]);\n      console.log(\"last name old value\", oldValues[1]);\n      console.log(\"last name new value\", newValues[1]);\n    }, {\n      immediate: true\n    }); //if watcher run on initial value as well as subsequent value you need to specify 3 rd argument\n    // to the object\n    // WATCHERS WITH REACTIVE\n\n    const state = reactive({\n      fName: \"\",\n      lName: \"\",\n      options: {\n        heroName: \"\"\n      }\n    }); //when you passing reactive object as a data source the old and new value will be the same\n    //and that is inteded behaviour\n    // instead of state we use arrow function\n    // watch(\n    //   () => {\n    //     return {\n    //       ...state,\n    //     };\n    //   },\n    //   function (newValue, oldValue) {\n    //     console.log(\"fName old value\", oldValue.fName);\n    //     console.log(\"fName new value\", newValue.fName);\n    //     console.log(\"lName old value\", oldValue.lName);\n    //     console.log(\"lName new value\", oldValue.lName);\n    //   }\n    // );\n    //when watching individual properties is in reactive object as well we need to use getter function\n\n    watch(() => state.fName, function (newValue, oldValue) {\n      console.log(\"fname old value\", oldValue);\n      console.log(\"fname new value\", newValue);\n    });\n    watch(() => _cloestate.options, function (newValue, oldValue) {\n      console.log(\"heroName old value\", oldValue);\n      console.log(\"heroName new value\", newValue);\n    }, {\n      deep: true\n    });\n    return {\n      firstName,\n      lastName,\n      ...toRefs(state)\n    };\n  },\n\n  data() {\n    return {\n      name: \"\"\n    };\n  },\n\n  watch: {\n    name(newValue, oldValue) {\n      console.log(\"Old Value\", oldValue);\n      console.log(\"New Value\", newValue);\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAqBA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,QAArB,EAA+BC,MAA/B,QAA6C,KAA7C;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,eAAe;EACbC,IAAI,EAAE,mBADO;;EAEbC,KAAK,GAAG;IACN,MAAMC,SAAQ,GAAIP,GAAG,CAAC,EAAD,CAArB;IACA,MAAMQ,QAAO,GAAIR,GAAG,CAAC,MAAD,CAApB,CAFM,CAIN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;;IACAC,KAAK,CACH,CAACM,SAAD,EAAYC,QAAZ,CADG,EAEH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;MACxBC,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,SAAS,CAAC,CAAD,CAA7C;MACAC,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,SAAS,CAAC,CAAD,CAA7C;MACAE,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,SAAS,CAAC,CAAD,CAA5C;MACAC,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,SAAS,CAAC,CAAD,CAA5C;IACD,CAPE,EAQH;MAAEI,SAAS,EAAE;IAAb,CARG,CAAL,CAfM,CA0BN;IACA;IAEA;;IACA,MAAMC,KAAI,GAAIZ,QAAQ,CAAC;MACrBa,KAAK,EAAE,EADc;MAErBC,KAAK,EAAE,EAFc;MAGrBC,OAAO,EAAE;QACPC,QAAQ,EAAE;MADH;IAHY,CAAD,CAAtB,CA9BM,CAsCN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;;IACAjB,KAAK,CACH,MAAMa,KAAK,CAACC,KADT,EAEH,UAAUI,QAAV,EAAoBC,QAApB,EAA8B;MAC5BT,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BQ,QAA/B;MACAT,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BO,QAA/B;IACF,CALG,CAAL;IAQAlB,KAAK,CACH,MAAMoB,UAAU,CAACJ,OADd,EAEH,UAAUE,QAAV,EAAoBC,QAApB,EAA8B;MAC5BT,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCQ,QAAlC;MACAT,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCO,QAAlC;IACD,CALE,EAMH;MACEG,IAAI,EAAE;IADR,CANG,CAAL;IAUA,OAAO;MACLf,SADK;MAELC,QAFK;MAGL,GAAGL,MAAM,CAACW,KAAD;IAHJ,CAAP;EAKD,CAjFY;;EAkFbS,IAAI,GAAG;IACL,OAAO;MACLlB,IAAI,EAAE;IADD,CAAP;EAGD,CAtFY;;EAuFbJ,KAAK,EAAE;IACLI,IAAI,CAACc,QAAD,EAAWC,QAAX,EAAqB;MACvBT,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBQ,QAAzB;MACAT,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBO,QAAzB;IACD;;EAJI;AAvFM,CAAf","names":["ref","watch","reactive","toRefs","_","name","setup","firstName","lastName","newValues","oldValues","console","log","immediate","state","fName","lName","options","heroName","newValue","oldValue","_cloestate","deep","data"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/composition_api_project_example/src/components/ReplacingWatchers.vue"],"sourcesContent":["<template>\n  <div>\n    <h4>OptionAPI Watchers</h4>\n    <input type=\"text\" placeholder=\"Name\" v-model=\"name\" />\n\n    <h4>Composition API Watchers with Ref</h4>\n    <input type=\"text\" placeholder=\"First Name\" v-model=\"firstName\" />\n    <input type=\"text\" placeholder=\"Last Name\" v-model=\"lastName\" />\n\n    <h4>Composition API Watchers With Reactive</h4>\n    <input type=\"text\" placeholder=\"Reactive First Name\" v-model=\"fName\" />\n    <input type=\"text\" placeholder=\"Reactive Last Name\" v-model=\"lName\" />\n    <input\n      type=\"text\"\n      placeholder=\"Reactive Option Hero Name\"\n      v-model=\"options.heroName\"\n    />\n  </div>\n</template>\n\n<script>\nimport { ref, watch, reactive, toRefs } from \"vue\";\nimport _ from \"lodash\";\nexport default {\n  name: \"ReplacingWatchers\",\n  setup() {\n    const firstName = ref(\"\");\n    const lastName = ref(\"twin\");\n\n    //the function accepts 2 argument\n    // 1 st arguments data stores to watch\n    // 2 nd argument function which  is pretty much as same we use our data option\n    //it receives oldvalue and new value as argument\n    // watch(firstName, (newValue, oldValue) => {\n    //   console.log(\"old value\", oldValue);\n    //   console.log(\"new value\", newValue);\n    // });\n\n    //watch function also expects an array of data sources as well\n    //also uses multiple sources using array\n    watch(\n      [firstName, lastName],\n      (newValues, oldValues) => {\n        console.log(\"first name old value\", oldValues[0]);\n        console.log(\"first name new value\", newValues[0]);\n        console.log(\"last name old value\", oldValues[1]);\n        console.log(\"last name new value\", newValues[1]);\n      },\n      { immediate: true }\n    );\n\n    //if watcher run on initial value as well as subsequent value you need to specify 3 rd argument\n    // to the object\n\n    // WATCHERS WITH REACTIVE\n    const state = reactive({\n      fName: \"\",\n      lName: \"\",\n      options: {\n        heroName: \"\",\n      },\n    });\n\n    //when you passing reactive object as a data source the old and new value will be the same\n    //and that is inteded behaviour\n    // instead of state we use arrow function\n    // watch(\n    //   () => {\n    //     return {\n    //       ...state,\n    //     };\n    //   },\n    //   function (newValue, oldValue) {\n    //     console.log(\"fName old value\", oldValue.fName);\n    //     console.log(\"fName new value\", newValue.fName);\n    //     console.log(\"lName old value\", oldValue.lName);\n    //     console.log(\"lName new value\", oldValue.lName);\n    //   }\n    // );\n\n    //when watching individual properties is in reactive object as well we need to use getter function\n    watch(\n      () => state.fName,\n      function (newValue, oldValue) {\n        console.log(\"fname old value\", oldValue);\n        console.log(\"fname new value\", newValue);\n      }\n    );\n\n    watch(\n      () => _cloestate.options,\n      function (newValue, oldValue) {\n        console.log(\"heroName old value\", oldValue);\n        console.log(\"heroName new value\", newValue);\n      },\n      {\n        deep: true,\n      }\n    );\n    return {\n      firstName,\n      lastName,\n      ...toRefs(state),\n    };\n  },\n  data() {\n    return {\n      name: \"\",\n    };\n  },\n  watch: {\n    name(newValue, oldValue) {\n      console.log(\"Old Value\", oldValue);\n      console.log(\"New Value\", newValue);\n    },\n  },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}