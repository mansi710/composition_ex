{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h4\", null, \"Composition API Watchers With Reactive\", -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"First Name\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.fName = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, _ctx.fName]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"Last Name\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.lName = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, _ctx.lName]])]);\n}","map":{"version":3,"mappings":";;gCAIIA,oBAA+C,IAA/C,EAA+C,IAA/C,EAAI,wCAAJ,EAA0C;AAAA;AAA1C;;;uBAHFC,oBAMM,KANN,EAMM,IANN,EAMM,CAHJC,UAGI,kBAFJF,oBAA8D,OAA9D,EAA8D;IAAvDG,IAAI,EAAC,MAAkD;IAA3CC,WAAW,EAAC,YAA+B;+DAATC,aAAKC;EAAI,CAA9D;;EAAA,kBAAqDD,aAEjD,kBADJL,oBAA6D,OAA7D,EAA6D;IAAtDG,IAAI,EAAC,MAAiD;IAA1CC,WAAW,EAAC,WAA8B;+DAATC,aAAKC;EAAI,CAA7D;;EAAA,kBAAoDD,aAChD,CANN","names":["_createElementVNode","_createElementBlock","_hoisted_1","type","placeholder","_ctx","$event"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/composition_api_project_example/src/components/ReplacingWatchersReactive.vue"],"sourcesContent":["<template>\n  <div>\n\n\n    <h4>Composition API Watchers With Reactive</h4>\n    <input type=\"text\" placeholder=\"First Name\" v-model=\"fName\" />\n    <input type=\"text\" placeholder=\"Last Name\" v-model=\"lName\" />\n  </div>\n</template>\n\n<script>\nimport { ref, watch, reactive } from \"vue\";\nexport default {\n  name: \"ReplacingWatchersReactive\",\n  setup() {\n   \n\n    const state = reactive({\n      firstName: \"\",\n      lastName: \"\",\n    });\n    //the function accepts 2 argument\n    // 1 st arguments data stores to watch\n    // 2 nd argument function which  is pretty much as same we use our data option\n    //it receives oldvalue and new value as argument\n    // watch(firstName, (newValue, oldValue) => {\n    //   console.log(\"old value\", oldValue);\n    //   console.log(\"new value\", newValue);\n    // });\n\n    //watch function also expects an array of data sources as well\n    //also uses multiple sources using array\n    watch(\n      [firstName, lastName],\n      (newValues, oldValues) => {\n        console.log(\"first name old value\", oldValues[0]);\n        console.log(\"first name new value\", newValues[0]);\n        console.log(\"last name old value\", oldValues[1]);\n        console.log(\"last name new value\", newValues[1]);\n      },\n      { immediate: true }\n    );\n\n    //if watcher run on initial value as well as subsequent value you need to specify 3 rd argument\n    // to the object\n    return {\n     \n      ...toRefs(state),\n    };\n  },\n  \n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}