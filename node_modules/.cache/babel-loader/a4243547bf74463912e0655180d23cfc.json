{"ast":null,"code":"import { ref } from \"vue\";\nexport default {\n  name: \"ReplacingWatchers\",\n\n  setup() {\n    const firstName = ref(\"\");\n    const lastName = ref(\"twin\"); //the function accepts 2 argument\n    // 1 st arguments data stores to watch\n    // 2 nd argument function which  is pretty much as same we use our data option\n    //it receives oldvalue and new value as argument\n    // watch(firstName, (newValue, oldValue) => {\n    //   console.log(\"old value\", oldValue);\n    //   console.log(\"new value\", newValue);\n    // });\n    //watch function also expects an array of data sources as well\n    //also uses multiple sources using array\n\n    watch([firstName, lastName], (newValues, oldValues) => {\n      console.log(\"first name old value\", oldValues[0]);\n      console.log(\"first name new value\", newValues[0]);\n      console.log(\"last name old value\", oldValues[1]);\n      console.log(\"last name new value\", newValues[1]);\n    }, {\n      immediate: true\n    }); //if watcher run on initial value as well as subsequent value you need to specify 3 rd argument\n    // to the object\n    // WATCHERS WITH REACTIVE\n    // const state = reactive({\n    //   fName: \"\",\n    //   lName: \"\",\n    // });\n    // watcher(state, function (newValue, oldValue) {\n    //   console.log(\"fName old value\", oldValue.fName);\n    //   console.log(\"fName new value\", newValue.fName);\n    //   console.log(\"lName old value\", oldValue.lName);\n    //   console.log(\"lName new value\", oldValue.lName);\n    //   console.log(\"fName new value\", newValue.fName);\n    //   console.log(\"lName old value\", oldValue.lName);\n    //   console.log(\"lName new value\", oldValue.lName);\n    // });\n\n    return {\n      firstName,\n      lastName // ...toRef(state),\n\n    };\n  },\n\n  data() {\n    return {\n      name: \"\"\n    };\n  },\n\n  watch: {\n    name(newValue, oldValue) {\n      console.log(\"Old Value\", oldValue);\n      console.log(\"New Value\", newValue);\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAgBA,SAASA,GAAT,QAAoB,KAApB;AACA,eAAe;EACbC,IAAI,EAAE,mBADO;;EAEbC,KAAK,GAAG;IACN,MAAMC,SAAQ,GAAIH,GAAG,CAAC,EAAD,CAArB;IACA,MAAMI,QAAO,GAAIJ,GAAG,CAAC,MAAD,CAApB,CAFM,CAIN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;;IACAK,KAAK,CACH,CAACF,SAAD,EAAYC,QAAZ,CADG,EAEH,CAACE,SAAD,EAAYC,SAAZ,KAA0B;MACxBC,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,SAAS,CAAC,CAAD,CAA7C;MACAC,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,SAAS,CAAC,CAAD,CAA7C;MACAE,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,SAAS,CAAC,CAAD,CAA5C;MACAC,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,SAAS,CAAC,CAAD,CAA5C;IACD,CAPE,EAQH;MAAEI,SAAS,EAAE;IAAb,CARG,CAAL,CAfM,CA0BN;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA,OAAO;MACLP,SADK;MAELC,QAFK,CAGL;;IAHK,CAAP;EAKD,CAnDY;;EAoDbO,IAAI,GAAG;IACL,OAAO;MACLV,IAAI,EAAE;IADD,CAAP;EAGD,CAxDY;;EAyDbI,KAAK,EAAE;IACLJ,IAAI,CAACW,QAAD,EAAWC,QAAX,EAAqB;MACvBL,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBI,QAAzB;MACAL,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBG,QAAzB;IACD;;EAJI;AAzDM,CAAf","names":["ref","name","setup","firstName","lastName","watch","newValues","oldValues","console","log","immediate","data","newValue","oldValue"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/composition_api_project_example/src/components/ReplacingWatchers.vue"],"sourcesContent":["<template>\n  <div>\n    <h4>OptionAPI Watchers</h4>\n    <input type=\"text\" placeholder=\"Name\" v-model=\"name\" />\n\n    <h4>Composition API Watchers with Ref</h4>\n    <input type=\"text\" placeholder=\"First Name\" v-model=\"firstName\" />\n    <input type=\"text\" placeholder=\"Last Name\" v-model=\"lastName\" />\n\n    <h4>Composition API Watchers With Reactive</h4>\n    <input type=\"text\" placeholder=\"Reactive First Name\" v-model=\"fName\" />\n    <input type=\"text\" placeholder=\"Reactive Last Name\" v-model=\"lName\" />\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\nexport default {\n  name: \"ReplacingWatchers\",\n  setup() {\n    const firstName = ref(\"\");\n    const lastName = ref(\"twin\");\n\n    //the function accepts 2 argument\n    // 1 st arguments data stores to watch\n    // 2 nd argument function which  is pretty much as same we use our data option\n    //it receives oldvalue and new value as argument\n    // watch(firstName, (newValue, oldValue) => {\n    //   console.log(\"old value\", oldValue);\n    //   console.log(\"new value\", newValue);\n    // });\n\n    //watch function also expects an array of data sources as well\n    //also uses multiple sources using array\n    watch(\n      [firstName, lastName],\n      (newValues, oldValues) => {\n        console.log(\"first name old value\", oldValues[0]);\n        console.log(\"first name new value\", newValues[0]);\n        console.log(\"last name old value\", oldValues[1]);\n        console.log(\"last name new value\", newValues[1]);\n      },\n      { immediate: true }\n    );\n\n    //if watcher run on initial value as well as subsequent value you need to specify 3 rd argument\n    // to the object\n\n    // WATCHERS WITH REACTIVE\n    // const state = reactive({\n    //   fName: \"\",\n    //   lName: \"\",\n    // });\n\n    // watcher(state, function (newValue, oldValue) {\n    //   console.log(\"fName old value\", oldValue.fName);\n    //   console.log(\"fName new value\", newValue.fName);\n    //   console.log(\"lName old value\", oldValue.lName);\n    //   console.log(\"lName new value\", oldValue.lName);\n    //   console.log(\"fName new value\", newValue.fName);\n    //   console.log(\"lName old value\", oldValue.lName);\n    //   console.log(\"lName new value\", oldValue.lName);\n    // });\n    return {\n      firstName,\n      lastName,\n      // ...toRef(state),\n    };\n  },\n  data() {\n    return {\n      name: \"\",\n    };\n  },\n  watch: {\n    name(newValue, oldValue) {\n      console.log(\"Old Value\", oldValue);\n      console.log(\"New Value\", newValue);\n    },\n  },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}