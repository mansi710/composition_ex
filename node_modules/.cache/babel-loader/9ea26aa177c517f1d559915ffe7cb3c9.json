{"ast":null,"code":"import { ref, watch, reactive } from \"vue\";\nexport default {\n  name: \"ReplacingWatchersReactive\",\n\n  setup() {\n    const state = reactive({\n      firstName: \"\",\n      lastName: \"\"\n    }); //the function accepts 2 argument\n    // 1 st arguments data stores to watch\n    // 2 nd argument function which  is pretty much as same we use our data option\n    //it receives oldvalue and new value as argument\n    // watch(firstName, (newValue, oldValue) => {\n    //   console.log(\"old value\", oldValue);\n    //   console.log(\"new value\", newValue);\n    // });\n    //watch function also expects an array of data sources as well\n    //also uses multiple sources using array\n\n    watch([firstName, lastName], (newValues, oldValues) => {\n      console.log(\"first name old value\", oldValues[0]);\n      console.log(\"first name new value\", newValues[0]);\n      console.log(\"last name old value\", oldValues[1]);\n      console.log(\"last name new value\", newValues[1]);\n    }, {\n      immediate: true\n    }); //if watcher run on initial value as well as subsequent value you need to specify 3 rd argument\n    // to the object\n\n    return { ...toRefs(state)\n    };\n  }\n\n};","map":{"version":3,"mappings":"AASA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,QAArB,QAAqC,KAArC;AACA,eAAe;EACbC,IAAI,EAAE,2BADO;;EAEbC,KAAK,GAAG;IACN,MAAMC,KAAI,GAAIH,QAAQ,CAAC;MACrBI,SAAS,EAAE,EADU;MAErBC,QAAQ,EAAE;IAFW,CAAD,CAAtB,CADM,CAKN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;;IACAN,KAAK,CACH,CAACK,SAAD,EAAYC,QAAZ,CADG,EAEH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;MACxBC,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,SAAS,CAAC,CAAD,CAA7C;MACAC,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,SAAS,CAAC,CAAD,CAA7C;MACAE,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,SAAS,CAAC,CAAD,CAA5C;MACAC,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,SAAS,CAAC,CAAD,CAA5C;IACD,CAPE,EAQH;MAAEI,SAAS,EAAE;IAAb,CARG,CAAL,CAhBM,CA2BN;IACA;;IACA,OAAO,EACL,GAAGC,MAAM,CAACR,KAAD;IADJ,CAAP;EAGD;;AAlCY,CAAf","names":["ref","watch","reactive","name","setup","state","firstName","lastName","newValues","oldValues","console","log","immediate","toRefs"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/composition_api_project_example/src/components/ReplacingWatchersReactive.vue"],"sourcesContent":["<template>\n  <div>\n    <h4>Composition API Watchers With Reactive</h4>\n    <input type=\"text\" placeholder=\"Reactive First Name\" v-model=\"fName\" />\n    <input type=\"text\" placeholder=\"Reactive Last Name\" v-model=\"lName\" />\n  </div>\n</template>\n\n<script>\nimport { ref, watch, reactive } from \"vue\";\nexport default {\n  name: \"ReplacingWatchersReactive\",\n  setup() {\n    const state = reactive({\n      firstName: \"\",\n      lastName: \"\",\n    });\n    //the function accepts 2 argument\n    // 1 st arguments data stores to watch\n    // 2 nd argument function which  is pretty much as same we use our data option\n    //it receives oldvalue and new value as argument\n    // watch(firstName, (newValue, oldValue) => {\n    //   console.log(\"old value\", oldValue);\n    //   console.log(\"new value\", newValue);\n    // });\n\n    //watch function also expects an array of data sources as well\n    //also uses multiple sources using array\n    watch(\n      [firstName, lastName],\n      (newValues, oldValues) => {\n        console.log(\"first name old value\", oldValues[0]);\n        console.log(\"first name new value\", newValues[0]);\n        console.log(\"last name old value\", oldValues[1]);\n        console.log(\"last name new value\", newValues[1]);\n      },\n      { immediate: true }\n    );\n\n    //if watcher run on initial value as well as subsequent value you need to specify 3 rd argument\n    // to the object\n    return {\n      ...toRefs(state),\n    };\n  },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}